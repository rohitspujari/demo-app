type Task {
  id: ID!
  name: String!
  description: String
  notes: String
  date: String
}

enum objectType {
  VIDEO
  AUDIO
  IMAGE
  TXT
}

type Object {
  id: ID!
  name: String!
  objectType: objectType!
  createdBy: User
}

type User {
  id: ID!
  name: String!
  email: String!
  type: String!
  objects(filter: ModelObjectFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelObjectConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTaskConnection {
  items: [Task]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelTaskFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  notes: ModelStringFilterInput
  date: ModelStringFilterInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
}

type Query {
  getTask(id: ID!): Task
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
  getObject(id: ID!): Object
  listObjects(filter: ModelObjectFilterInput, limit: Int, nextToken: String): ModelObjectConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  searchObjects(filter: SearchableObjectFilterInput, sort: SearchableObjectSortInput, limit: Int, nextToken: Int): SearchableObjectConnection
  searchUsers(filter: SearchableUserFilterInput, sort: SearchableUserSortInput, limit: Int, nextToken: Int): SearchableUserConnection
}

input CreateTaskInput {
  id: ID
  name: String!
  description: String
  notes: String
  date: String
}

input UpdateTaskInput {
  id: ID!
  name: String
  description: String
  notes: String
  date: String
}

input DeleteTaskInput {
  id: ID
}

type Mutation {
  createTask(input: CreateTaskInput!): Task
  updateTask(input: UpdateTaskInput!): Task
  deleteTask(input: DeleteTaskInput!): Task
  createObject(input: CreateObjectInput!): Object
  updateObject(input: UpdateObjectInput!): Object
  deleteObject(input: DeleteObjectInput!): Object
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
}

type Subscription {
  onCreateTask: Task @aws_subscribe(mutations: ["createTask"])
  onUpdateTask: Task @aws_subscribe(mutations: ["updateTask"])
  onDeleteTask: Task @aws_subscribe(mutations: ["deleteTask"])
  onCreateObject: Object @aws_subscribe(mutations: ["createObject"])
  onUpdateObject: Object @aws_subscribe(mutations: ["updateObject"])
  onDeleteObject: Object @aws_subscribe(mutations: ["deleteObject"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
}

type ModelObjectConnection {
  items: [Object]
  nextToken: String
}

input ModelObjectFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelObjectFilterInput]
  or: [ModelObjectFilterInput]
  not: ModelObjectFilterInput
}

input CreateObjectInput {
  id: ID
  name: String!
  objectType: objectType!
  objectCreatedById: ID
}

input UpdateObjectInput {
  id: ID!
  name: String
  objectType: objectType
  objectCreatedById: ID
}

input DeleteObjectInput {
  id: ID
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  email: ModelStringFilterInput
  type: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  name: String!
  email: String!
  type: String!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  type: String
}

input DeleteUserInput {
  id: ID
}

input SearchableStringFilterInput {
  ne: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableObjectFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  and: [SearchableObjectFilterInput]
  or: [SearchableObjectFilterInput]
  not: SearchableObjectFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableObjectSortableFields {
  id
  name
}

input SearchableObjectSortInput {
  field: SearchableObjectSortableFields
  direction: SearchableSortDirection
}

type SearchableObjectConnection {
  items: [Object]
  nextToken: String
}

input SearchableUserFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  email: SearchableStringFilterInput
  type: SearchableStringFilterInput
  and: [SearchableUserFilterInput]
  or: [SearchableUserFilterInput]
  not: SearchableUserFilterInput
}

enum SearchableUserSortableFields {
  id
  name
  email
  type
}

input SearchableUserSortInput {
  field: SearchableUserSortableFields
  direction: SearchableSortDirection
}

type SearchableUserConnection {
  items: [User]
  nextToken: String
}
