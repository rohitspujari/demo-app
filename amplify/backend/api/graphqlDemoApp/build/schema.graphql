type S3Object {
  id: ID!
  name: String!
  prefix: String!
  createdBy: User!
}

type User {
  id: ID!
  name: String!
  email: String!
  type: String!
  sub: String
  objects(filter: ModelS3ObjectFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelS3ObjectConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelS3ObjectConnection {
  items: [S3Object]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelS3ObjectFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  prefix: ModelStringFilterInput
  and: [ModelS3ObjectFilterInput]
  or: [ModelS3ObjectFilterInput]
  not: ModelS3ObjectFilterInput
}

type Query {
  getS3Object(id: ID!): S3Object
  listS3Objects(filter: ModelS3ObjectFilterInput, limit: Int, nextToken: String): ModelS3ObjectConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  searchS3Objects(filter: SearchableS3ObjectFilterInput, sort: SearchableS3ObjectSortInput, limit: Int, nextToken: Int): SearchableS3ObjectConnection
  searchUsers(filter: SearchableUserFilterInput, sort: SearchableUserSortInput, limit: Int, nextToken: Int): SearchableUserConnection
}

input CreateS3ObjectInput {
  id: ID
  name: String!
  prefix: String!
  s3ObjectCreatedById: ID!
}

input UpdateS3ObjectInput {
  id: ID!
  name: String
  prefix: String
  s3ObjectCreatedById: ID
}

input DeleteS3ObjectInput {
  id: ID
}

type Mutation {
  createS3Object(input: CreateS3ObjectInput!): S3Object
  updateS3Object(input: UpdateS3ObjectInput!): S3Object
  deleteS3Object(input: DeleteS3ObjectInput!): S3Object
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
}

type Subscription {
  onCreateS3Object: S3Object @aws_subscribe(mutations: ["createS3Object"])
  onUpdateS3Object: S3Object @aws_subscribe(mutations: ["updateS3Object"])
  onDeleteS3Object: S3Object @aws_subscribe(mutations: ["deleteS3Object"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  email: ModelStringFilterInput
  type: ModelStringFilterInput
  sub: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  name: String!
  email: String!
  type: String!
  sub: String
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  type: String
  sub: String
}

input DeleteUserInput {
  id: ID
}

input SearchableStringFilterInput {
  ne: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableS3ObjectFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  prefix: SearchableStringFilterInput
  and: [SearchableS3ObjectFilterInput]
  or: [SearchableS3ObjectFilterInput]
  not: SearchableS3ObjectFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableS3ObjectSortableFields {
  id
  name
  prefix
}

input SearchableS3ObjectSortInput {
  field: SearchableS3ObjectSortableFields
  direction: SearchableSortDirection
}

type SearchableS3ObjectConnection {
  items: [S3Object]
  nextToken: String
}

input SearchableUserFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  email: SearchableStringFilterInput
  type: SearchableStringFilterInput
  sub: SearchableStringFilterInput
  and: [SearchableUserFilterInput]
  or: [SearchableUserFilterInput]
  not: SearchableUserFilterInput
}

enum SearchableUserSortableFields {
  id
  name
  email
  type
  sub
}

input SearchableUserSortInput {
  field: SearchableUserSortableFields
  direction: SearchableSortDirection
}

type SearchableUserConnection {
  items: [User]
  nextToken: String
}
